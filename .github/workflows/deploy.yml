# .github/workflows/deploy.yml

name: Deploy LinkShrink Services

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1

jobs:
  # ====================================================================
  # === JOB 1: Create ECR Repositories First
  # ====================================================================
  create_ecr_repos:
    name: Create ECR Repositories
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
      - name: Terraform Apply (ECR Repos Only)
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_link_db_password: ${{ secrets.LINK_DB_PASSWORD }}
          TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
          TF_VAR_mq_password: ${{ secrets.MQ_PASSWORD }}
        run: |
          terraform apply -auto-approve \
            -target=aws_ecr_repository.user_service \
            -target=aws_ecr_repository.link_service \
            -target=aws_ecr_repository.redirect_service \
            -target=aws_ecr_repository.analytics_service \
            -target=aws_ecr_repository.web_gui_service
        working-directory: ./terraform

  # ====================================================================
  # === JOB 2: Build and Push Images
  # ====================================================================
  build_and_push_images:
    name: Build and Push All Docker Images
    runs-on: ubuntu-latest
    needs: create_ecr_repos
    outputs:
      image_tag: ${{ steps.tag_image.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Set image tag from Git commit hash
        id: tag_image
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build, tag, and push all images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.tag_image.outputs.tag }}
        run: |
          # The service names must match their directory names for the build command,
          # but the repository name for push. We'll adjust the push command.
          SERVICES=("user-service" "link-service" "redirect-service" "analytics-service" "web-gui-service") # <-- THE FIX
          
          # We need to handle the web-gui separately as its directory name is different
          BACKEND_SERVICES=("user-service" "link-service" "redirect-service" "analytics-service")
          for SERVICE in "${BACKEND_SERVICES[@]}"
          do
            echo "--- Building and Pushing $SERVICE ---"
            docker build -t $ECR_REGISTRY/$SERVICE:$IMAGE_TAG -f $SERVICE/Dockerfile $SERVICE
            docker push $ECR_REGISTRY/$SERVICE:$IMAGE_TAG
          done

          echo "--- Building and Pushing web-gui-service ---"
          # Build from the 'web-gui' directory but tag it with the correct repository name 'web-gui-service'
          docker build -t $ECR_REGISTRY/web-gui-service:$IMAGE_TAG -f web-gui/Dockerfile web-gui
          docker push $ECR_REGISTRY/web-gui-service:$IMAGE_TAG

  # ====================================================================
  # === JOB 3: Deploy the Rest of the Infrastructure
  # ====================================================================
  deploy_services:
    name: Deploy ECS Services and Infrastructure
    runs-on: ubuntu-latest
    needs: build_and_push_images

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
      - name: Terraform Apply (All Remaining Resources)
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_link_db_password: ${{ secrets.LINK_DB_PASSWORD }}
          TF__jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
          TF_VAR_mq_password: ${{ secrets.MQ_PASSWORD }}
        run: |
          terraform apply -auto-approve -var="image_tag=${{ needs.build_and_push_images.outputs.image_tag }}"
        working-directory: ./terraform