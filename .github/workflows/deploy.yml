# .github/workflows/deploy.yml

name: Deploy LinkShrink Service

on:
  push:
    branches:
      - main # This pipeline runs on every push to the main branch

jobs:
  # JOB 1: Builds the code into a Docker image and pushes it to ECR
  build_and_push_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    # This 'outputs' section is CRITICAL. It makes the image tag available
    # to other jobs that 'need' this one.
    outputs:
      image_tag: ${{ steps.tag_image.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # This step creates a unique tag from the short git commit hash
      - name: Set image tag
        id: tag_image
        # This writes the tag to a GitHub Actions output variable
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: user-service
          # This correctly uses the tag created in the previous step
          IMAGE_TAG: ${{ steps.tag_image.outputs.tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./user-service
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # JOB 2: Runs Terraform to update the infrastructure
  deploy_infrastructure:
    name: Deploy Infrastructure with Terraform
    runs-on: ubuntu-latest
    # The 'needs' keyword ensures this job waits for the image to be pushed
    # and gives it access to the 'outputs' from the first job.
    needs: build_and_push_image

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        env:
          # This is the correct way to pass secrets to Terraform
          TF_VAR_db_password: ${{ secrets.TF_VAR_db_password }}
        run: |
          # THIS IS THE KEY FIX:
          # It gets the 'image_tag' output from the 'build_and_push_image' job
          # and passes it DIRECTLY to Terraform, overriding the "latest" default.
          terraform apply -auto-approve -var="image_tag=${{ needs.build_and_push_image.outputs.image_tag }}"
        working-directory: ./terraform