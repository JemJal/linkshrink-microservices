# .github/workflows/deploy.yml

name: Deploy LinkShrink Services

on:
  # Run on pushes to the main branch (our production deployment)
  push:
    branches:
      - main
  # Also run on pull requests targeting the main branch (our pre-deployment check)
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1

jobs:
  # (Job 1: create_ecr_repos remains exactly the same)
  create_ecr_repos:
    name: Create ECR Repositories
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
      - name: Terraform Apply (ECR Repos Only)
        env:
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_link_db_password: ${{ secrets.TF_VAR_LINK_DB_PASSWORD }}
          TF_VAR_jwt_secret_key: ${{ secrets.TF_VAR_JWT_SECRET_KEY }}
          TF_VAR_mq_password: ${{ secrets.TF_VAR_MQ_PASSWORD }}
          TF_VAR_parent_zone_name: ${{ secrets.TF_VAR_PARENT_ZONE_NAME }}
          TF_VAR_domain_name: ${{ secrets.TF_VAR_DOMAIN_NAME }}
          TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}
        run: |
          terraform apply -auto-approve \
            -target=aws_ecr_repository.user_service \
            -target=aws_ecr_repository.link_service \
            -target=aws_ecr_repository.redirect_service \
            -target=aws_ecr_repository.analytics_service \
            -target=aws_ecr_repository.web_gui_service
        working-directory: ./terraform

  # (Job 2: build_and_push_images remains exactly the same)
  build_and_push_images:
    name: Build and Push All Docker Images
    runs-on: ubuntu-latest
    needs: create_ecr_repos
    outputs:
      image_tag: ${{ steps.tag_image.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - id: tag_image
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build, tag, and push all images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.tag_image.outputs.tag }}
        run: |
          BACKEND_SERVICES=("user-service" "link-service" "redirect-service" "analytics-service")
          for SERVICE in "${BACKEND_SERVICES[@]}"; do
            echo "--- Building and Pushing $SERVICE ---"
            docker build --no-cache -t $ECR_REGISTRY/$SERVICE:$IMAGE_TAG -f $SERVICE/Dockerfile $SERVICE
            docker push $ECR_REGISTRY/$SERVICE:$IMAGE_TAG
          done
          echo "--- Building and Pushing web-gui-service ---"
          docker build --no-cache -t $ECR_REGISTRY/web-gui-service:$IMAGE_TAG -f web-gui/Dockerfile web-gui
          docker push $ECR_REGISTRY/web-gui-service:$IMAGE_TAG

  # Job 3 is now smarter
  deploy_or_plan:
    name: Terraform Plan or Deploy
    runs-on: ubuntu-latest
    needs: build_and_push_images

    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        
      - name: Terraform Plan (for Pull Requests)
        # This step ONLY runs for Pull Requests. It's a safe 'dry run'.
        if: github.event_name == 'pull_request'
        env:
            TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
            TF_VAR_link_db_password: ${{ secrets.TF_VAR_LINK_DB_PASSWORD }}
            TF_VAR_jwt_secret_key: ${{ secrets.TF_VAR_JWT_SECRET_KEY }}
            TF_VAR_mq_password: ${{ secrets.TF_VAR_MQ_PASSWORD }}
            TF_VAR_parent_zone_name: ${{ secrets.TF_VAR_PARENT_ZONE_NAME }}
            TF_VAR_domain_name: ${{ secrets.TF_VAR_DOMAIN_NAME }}
            TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}
        run: terraform plan -var="image_tag=${{ needs.build_and_push_images.outputs.image_tag }}"
        working-directory: ./terraform

      - name: Terraform Apply (for pushes to main)
        # This step ONLY runs when you push directly to the 'main' branch (i.e., after a PR is merged).
        if: github.event_name == 'push'
        env:
            TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
            TF_VAR_link_db_password: ${{ secrets.TF_VAR_LINK_DB_PASSWORD }}
            TF_VAR_jwt_secret_key: ${{ secrets.TF_VAR_JWT_SECRET_KEY }}
            TF_VAR_mq_password: ${{ secrets.TF_VAR_MQ_PASSWORD }}
            TF_VAR_parent_zone_name: ${{ secrets.TF_VAR_PARENT_ZONE_NAME }}
            TF_VAR_domain_name: ${{ secrets.TF_VAR_DOMAIN_NAME }}
            TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}
        run: terraform apply -auto-approve -var="image_tag=${{ needs.build_and_push_images.outputs.image_tag }}"
        working-directory: ./terraform